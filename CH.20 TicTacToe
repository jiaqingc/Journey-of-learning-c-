using System;

namespace TicTacToe
{
    public enum State { undecided, X, O };
    class Program
    {
        static void Main(string[] args)
        {
            Board board = new Board();
            WinChecker winChecker = new WinChecker();
            Renderer renderer = new Renderer();
            Player player1 = new Player();
            Player player2 = new Player();

            Console.WriteLine("Game Started!");

            while (!winChecker.IsDraw(board) && winChecker.Check(board) == State.undecided)
            {
                renderer.RenderBoard(board);
                Position nextMove;

                if (board.NextTurn == State.X)
                    nextMove = player1.GetPosition();
                else
                    nextMove = player2.GetPosition();

                if (!board.SetState(nextMove, board.NextTurn))
                    Console.WriteLine("This is not a legal move.");
            }

            renderer.RenderBoard(board);
            renderer.RenderResults(winChecker.Check(board));

            Console.WriteLine("Game Ended!");
        }
    }

    class WinChecker
    {
        public State Check(Board board)
        {
            if (CheckForWin(board, State.X)) return State.X;
            if (CheckForWin(board, State.O)) return State.O;
            return State.undecided;
        }

        private bool CheckForWin(Board board, State player)
        {
            int countForCheck = 0;

            for (int row = 0; row < 3; row++)
            {
                for (int column = 0; column < 3; column++)
                {
                    if (board.GetState(new Position(row, column)) == player)
                        countForCheck++;
                }
                if (countForCheck == 3)
                {
                    return true;
                }

                countForCheck = 0;
            }

            for (int column = 0; column < 3; column++)
            {
                for (int row = 0; row < 3; row++)
                {
                    if (board.GetState(new Position(row, column)) == player)
                        countForCheck++;
                }
                if (countForCheck == 3)
                {
                    return true;
                }

                countForCheck = 0;
            }

            if (board.GetState(new Position(0, 0)) == player &&
                board.GetState(new Position(1, 1)) == player &&
                board.GetState(new Position(2, 2)) == player)
                return true;

            if (board.GetState(new Position(2, 0)) == player &&
                board.GetState(new Position(1, 1)) == player &&
                board.GetState(new Position(0, 2)) == player)
                return true;

            return false;
        }

        public bool IsDraw(Board board)
        {
            for (int row = 0; row < 3; row++)
                for (int column = 0; column < 3; column++)
                    if (board.GetState(new Position(row, column)) == State.undecided)
                        return false;

            return true;
        }
    }

    class Board
    {
        private State[,] state;
        public State NextTurn { get; private set; }

        public Board()
        {
            state = new State[3, 3];
            NextTurn = State.X;
        }

        public State GetState(Position position)
        {
            return state[position.Row, position.Column];
        }

        public bool SetState(Position position, State newState)
        {
            if (newState != NextTurn) return false;
            if (state[position.Row, position.Column] != State.undecided) return false;

            state[position.Row, position.Column] = newState;
            SwitchNextTurn();
            return true;
        }

        private void SwitchNextTurn()
        {
            if (NextTurn == State.X)
                NextTurn = State.O;
            else
                NextTurn = State.X;
        }
    }

    class Player
    {
        public Position GetPosition()
        {
            string userInput = Console.ReadLine();
            int position;

            while (!int.TryParse(userInput, out position))
            {
                Console.WriteLine("please use keypad or number from 1 to 9 as input.");
                userInput = Console.ReadLine();
            }

            Position desiredCoordinate = PositionForNumber(position);
            return desiredCoordinate;
        }

        private Position PositionForNumber(int position)
        {
            switch (position)
            {
                // Use number pad on the keyboard as the game board
                case 1: return new Position(2, 0);
                case 2: return new Position(2, 1);
                case 3: return new Position(2, 2);
                case 4: return new Position(1, 0);
                case 5: return new Position(1, 1);
                case 6: return new Position(1, 2);
                case 7: return new Position(0, 0);
                case 8: return new Position(0, 1);
                case 9: return new Position(0, 2);
                default: return null;
            }
        }
    }

    class Renderer
    {
        public void RenderBoard(Board board)
        {
            char[,] symbols = new char[3, 3];
            for (int row = 0; row < 3; row++)
                for (int column = 0; column < 3; column++)
                    symbols[row, column] = SymbolFor(board.GetState(new Position(row, column)));

            Console.WriteLine($" {symbols[0, 0]} | {symbols[0, 1]} | {symbols[0, 2]} ");
            Console.WriteLine($"---+---+---");
            Console.WriteLine($" {symbols[1, 0]} | {symbols[1, 1]} | {symbols[1, 2]} ");
            Console.WriteLine($"---+---+---");
            Console.WriteLine($" {symbols[2, 0]} | {symbols[2, 1]} | {symbols[2, 2]} ");
        }

        private char SymbolFor(State state)
        {
            switch (state)
            {
                case State.X: return 'X';
                case State.O: return 'O';
                default: return ' ';
            }
        }

        public void RenderResults(State winner)
        {
            switch (winner)
            {
                case State.X:
                case State.O:
                    Console.WriteLine($"The winner is {SymbolFor(winner)}");
                    break;
                case State.undecided:
                    Console.WriteLine("Draw!");
                    break;
            }
        }
    }

    class Position
    {
        public int Row { get; }
        public int Column { get; }

        public Position(int row, int column)
        {
            Row = row;
            Column = column;
        }
    }
} 
